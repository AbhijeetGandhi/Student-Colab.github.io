{"ast":null,"code":"import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';\nimport { ListView, Virtualization } from '@syncfusion/ej2-lists';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"template\"];\nconst _c1 = [\"groupTemplate\"];\nconst _c2 = [\"headerTemplate\"];\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nconst inputs = ['animation', 'checkBoxPosition', 'cssClass', 'dataSource', 'enable', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enableVirtualization', 'fields', 'groupTemplate', 'headerTemplate', 'headerTitle', 'height', 'htmlAttributes', 'locale', 'query', 'showCheckBox', 'showHeader', 'showIcon', 'sortOrder', 'template', 'width'];\nconst outputs = ['actionBegin', 'actionComplete', 'actionFailure', 'select'];\nconst twoWays = [''];\n/**\n * Represents Angular ListView Component\n * ```\n * <ejs-listview [dataSource]='data'></ejs-listview>\n * ```\n */\n\nlet ListViewComponent = /*#__PURE__*/(() => {\n  let ListViewComponent = class ListViewComponent extends ListView {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n      super();\n      this.ngEle = ngEle;\n      this.srenderer = srenderer;\n      this.viewContainerRef = viewContainerRef;\n      this.injector = injector;\n      this.element = this.ngEle.nativeElement;\n      this.injectedModules = this.injectedModules || [];\n\n      try {\n        let mod = this.injector.get('ListsVirtualization');\n\n        if (this.injectedModules.indexOf(mod) === -1) {\n          this.injectedModules.push(mod);\n        }\n      } catch (_a) {}\n\n      this.registerEvents(outputs);\n      this.addTwoWay.call(this, twoWays);\n      setValue('currentInstance', this, this.viewContainerRef);\n      this.context = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.context.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.context.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.context.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentChecked() {\n      this.context.ngAfterContentChecked(this);\n    }\n\n  };\n\n  ListViewComponent.ɵfac = function ListViewComponent_Factory(t) {\n    return new (t || ListViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n  };\n\n  ListViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ListViewComponent,\n    selectors: [[\"ejs-listview\"]],\n    contentQueries: function ListViewComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);\n      }\n    },\n    inputs: {\n      animation: \"animation\",\n      checkBoxPosition: \"checkBoxPosition\",\n      cssClass: \"cssClass\",\n      dataSource: \"dataSource\",\n      enable: \"enable\",\n      enableHtmlSanitizer: \"enableHtmlSanitizer\",\n      enablePersistence: \"enablePersistence\",\n      enableRtl: \"enableRtl\",\n      enableVirtualization: \"enableVirtualization\",\n      fields: \"fields\",\n      groupTemplate: \"groupTemplate\",\n      headerTemplate: \"headerTemplate\",\n      headerTitle: \"headerTitle\",\n      height: \"height\",\n      htmlAttributes: \"htmlAttributes\",\n      locale: \"locale\",\n      query: \"query\",\n      showCheckBox: \"showCheckBox\",\n      showHeader: \"showHeader\",\n      showIcon: \"showIcon\",\n      sortOrder: \"sortOrder\",\n      template: \"template\",\n      width: \"width\"\n    },\n    outputs: {\n      actionBegin: \"actionBegin\",\n      actionComplete: \"actionComplete\",\n      actionFailure: \"actionFailure\",\n      select: \"select\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ListViewComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /**\n   * @nocollapse\n   */\n\n  __decorate([Template(), __metadata(\"design:type\", Object)], ListViewComponent.prototype, \"template\", void 0);\n\n  __decorate([Template(), __metadata(\"design:type\", Object)], ListViewComponent.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Template(), __metadata(\"design:type\", Object)], ListViewComponent.prototype, \"headerTemplate\", void 0);\n\n  ListViewComponent = __decorate([ComponentMixins([ComponentBase]), __metadata(\"design:paramtypes\", [ElementRef, Renderer2, ViewContainerRef, Injector])], ListViewComponent);\n  return ListViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * NgModule definition for the ListView component.\n */\n\n\nlet ListViewModule = /*#__PURE__*/(() => {\n  class ListViewModule {}\n\n  ListViewModule.ɵfac = function ListViewModule_Factory(t) {\n    return new (t || ListViewModule)();\n  };\n\n  ListViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ListViewModule\n  });\n  ListViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  /**\n   * @nocollapse\n   */\n\n  return ListViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListViewModule, {\n    declarations: function () {\n      return [ListViewComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ListViewComponent];\n    }\n  });\n})();\n\nconst VirtualizationService = {\n  provide: 'ListsVirtualization',\n  useValue: Virtualization\n};\n/**\n * NgModule definition for the ListView component with providers.\n */\n\nlet ListViewAllModule = /*#__PURE__*/(() => {\n  class ListViewAllModule {}\n\n  ListViewAllModule.ɵfac = function ListViewAllModule_Factory(t) {\n    return new (t || ListViewAllModule)();\n  };\n\n  ListViewAllModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ListViewAllModule\n  });\n  ListViewAllModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [VirtualizationService],\n    imports: [[CommonModule, ListViewModule], ListViewModule]\n  });\n  /**\n   * @nocollapse\n   */\n\n  return ListViewAllModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ListViewAllModule, {\n    imports: function () {\n      return [CommonModule, ListViewModule];\n    },\n    exports: function () {\n      return [ListViewModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ListViewComponent, ListViewModule, ListViewAllModule, VirtualizationService, inputs as ɵa, outputs as ɵb };\nexport { classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo } from '@syncfusion/ej2-lists'; //# sourceMappingURL=ej2-angular-lists.js.map","map":null,"metadata":{},"sourceType":"module"}